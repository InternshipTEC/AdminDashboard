{"version":3,"sources":["components/UserList.js","components/UserCreate.js","components/UserEdit.js","components/TransactionCreate.js","components/TransactionList.js","components/TransactionEdit.js","App.js","serviceWorker.js","index.js"],"names":["UserList","props","List","Datagrid","BooleanField","source","TextField","label","EmailField","EditButton","basePath","DeleteButton","UserCreate","Create","title","SimpleForm","TextInput","type","UserEdit","Edit","disabled","BooleanInput","ArrayInput","SimpleFormIterator","useImageFieldStyles","makeStyles","theme","image","aspectRatio","maxHeight","imageFieldClasses","useState","users","setUsers","React","useEffect","token","localStorage","getItem","axios","get","BACKEND_URL","location","pathname","headers","Authorization","then","res","data","user","console","log","ImageField","classes","component","aria-label","Typography","map","ListItem","ListItemText","primary","authProvider","login","username","password","post","email","setItem","accessToken","catch","err","toString","logout","removeItem","Promise","resolve","checkError","checkAuth","reject","getPermissions","getIdentity","id","fullName","dataProvider","restProvider","url","options","Headers","Accept","set","fetchUtils","fetchJson","App","Admin","Resource","name","list","create","edit","TransactionList","TransactionCreate","TransactionEdit","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.abb68cb3.chunk.js","sourcesContent":["import React from 'react'\nimport {\n  List,\n  Datagrid,\n  TextField,\n  EmailField,\n  BooleanField,\n  EditButton,\n  DeleteButton,\n} from 'react-admin'\n\nconst UserList = (props) => {\n  return (\n    <List {...props}>\n      <Datagrid>\n        <BooleanField source='verified' />\n        <TextField source='id' label=\"No. TEC\" />\n        <TextField source='name' />\n        <EmailField source='email' />\n        <EditButton basePath='/users' />\n        <DeleteButton basePath='/users' />\n      </Datagrid>\n    </List>\n  )\n}\n\nexport default UserList\n","import React from 'react'\nimport { Create, SimpleForm, TextInput } from 'react-admin'\n\nconst UserCreate = (props) => {\n  return (\n    <Create title='Create a User' {...props}>\n      <SimpleForm>\n        <TextInput source='name' />\n        <TextInput source='email' />\n        <TextInput source='nim' />\n        <TextInput source='password' type=\"password\" />\n      </SimpleForm>\n    </Create>\n  )\n}\n\nexport default UserCreate\n","import React from 'react'\nimport { Edit, SimpleForm, TextInput, BooleanInput} from 'react-admin'\n\nconst UserEdit = (props) => {\n  return (\n    <Edit title='Edit User' {...props}>\n      <SimpleForm>\n        <TextInput disabled source='id' />\n        <TextInput source='name' />\n        <TextInput source='nim' />\n        <TextInput source='fakultas' />\n        <TextInput source='email' />\n        <BooleanInput source='verified' />\n      </SimpleForm>\n    </Edit>\n  )\n}\n\nexport default UserEdit\n","import React from 'react'\nimport { Create, SimpleForm, SimpleFormIterator, TextInput, ArrayInput} from 'react-admin'\n\nconst UserCreate = (props) => {\n  return (\n    <Create title='Create a Transaction' {...props}>\n      <SimpleForm>\n        <TextInput source='photoUrl'/>\n        <TextInput source='noRekening'/>\n        <TextInput source='pemilikRekening'/>\n        <TextInput source='media'/>\n        <TextInput source='metode'/>\n        <ArrayInput source='usersEmail'>\n          <SimpleFormIterator>\n            <TextInput/>\n          </SimpleFormIterator>\n        </ArrayInput>\n      </SimpleForm>\n    </Create>\n  )\n}\n\nexport default UserCreate\n","import React from 'react'\nimport {\n  List,\n  Datagrid,\n  TextField,\n  EditButton,\n  DeleteButton,\n  BooleanField\n} from 'react-admin'\n\nconst UserList = (props) => {\n  return (\n    <List {...props}>\n      <Datagrid>\n        <BooleanField source=\"verified\"/>\n        <TextField source='uniqueIdentifier' />\n        <TextField source='pemilikRekening' />\n        <EditButton basePath='/transaction' />\n        <DeleteButton basePath='/transaction' />\n      </Datagrid>\n    </List>\n  )\n}\n\nexport default UserList\n","import React, { useState } from 'react'\nimport { makeStyles } from '@material-ui/core/styles';\nimport { Edit, SimpleForm, TextInput, ImageField, BooleanInput, ArrayField, SingleFieldList, TextField, Datagrid, ChipField, SimpleFormIterator, ArrayInput } from 'react-admin'\nimport { cloneElement } from 'react'\nimport { Chip, List, ListItem, ListItemText, Typography } from '@material-ui/core';\nimport axios from 'axios';\nimport { BACKEND_URL } from '../App';\n\nconst useImageFieldStyles = makeStyles(theme => ({\n  image: { // This will override the style of the <img> inside the <div>\n    aspectRatio:\"initial\",\n    maxHeight:\"none\"\n  }\n}));\n\nconst TextArrayField = ({ record, source }) =>{ \n  React.useEffect(()=>{\n    console.log(record)\n  },[]) \n  return (\n  <>\n      {record[source].map(item => <ChipField label={item} key={item} />)}\n  </>\n)}\nTextArrayField.defaultProps = { addLabel: true };\n\nconst TagsField = ({ record }) => (\n  <ul>\n      {record.user.map(item => (\n          <li key={item}>{item}</li>\n      ))}\n  </ul>\n)\nTagsField.defaultProps = {\n  addLabel: true\n};\n\nconst UserEdit = (props) => {\n  const imageFieldClasses = useImageFieldStyles();\n  const [users, setUsers] = useState([]) \n  React.useEffect(()=>{\n    const token = localStorage.getItem('auth')\n    axios.get(BACKEND_URL + props.location.pathname,{\n      headers:{\n        Authorization:`Bearer ${token}`\n      }\n    })\n    .then(res=>res.data)\n    .then(data=>setUsers(data.data.user))\n  },[])\n  React.useEffect(()=>{\n    console.log(users)\n  },[,users])\n  return (\n    <Edit title='Edit User' {...props}>\n      <SimpleForm>\n        <ImageField classes={imageFieldClasses} source='photoUrl' />\n        <List component=\"nav\" aria-label=\"secondary mailbox folders\">\n          <Typography>Users : </Typography>\n        {\n          users.map(user=>(\n            <>\n                <ListItem>\n                  <ListItemText primary={user} />\n                </ListItem>\n            </>\n          ))\n        }     \n        </List>\n        <TextInput source='uniqueIdentifier' disabled/>\n        <TextInput source='nominal' disabled/>\n        <TextInput source='media' disabled/>\n        <TextInput source='noRekening' disabled/>\n        <TextInput source='pemilikRekening' disabled/>\n        <BooleanInput source='verified'/>\n      </SimpleForm>\n        \n    </Edit>\n  )\n}\n\nexport default UserEdit\n","import React from 'react'\nimport { Admin, fetchUtils, Resource } from 'react-admin'\nimport restProvider from 'ra-data-simple-rest'\nimport UserList from './components/UserList'\nimport UserCreate from './components/UserCreate'\nimport UserEdit from './components/UserEdit'\nimport TransactionCreate from './components/TransactionCreate'\nimport TransactionList from './components/TransactionList'\nimport TransactionEdit from './components/TransactionEdit'\nimport axios from 'axios'\n\nexport const BACKEND_URL = \"https://api.tecinternship2021.com\"\n\nconst authProvider = {\n    login: ({ username, password }) => {\n        return axios.post(`${BACKEND_URL}/auth/login`,{\n            email:username,\n            password\n        })\n        .then(data=>data.data.data)\n        .then(data=>{localStorage.setItem('auth',data.accessToken)})\n        .catch(\n          err=>{\n            console.log(err.toString())\n          }\n        )\n        // accept all username/password combinations\n    },\n    logout: () => {\n        localStorage.removeItem('auth');\n        return Promise.resolve();\n    },\n    checkError: () => Promise.resolve(),\n    checkAuth: () =>\n        localStorage.getItem('auth') ? Promise.resolve() : Promise.reject(),\n    getPermissions: () => Promise.reject('Unknown method'),\n    getIdentity: () =>\n        Promise.resolve({\n            id: 'user',\n            fullName: 'Admin TEC',\n        }),\n};\n\nconst httpClient = (url, options = {}) => {\n  if (!options.headers) {\n      options.headers = new Headers({ Accept: 'application/json' });\n  }\n  const accessToken = localStorage.getItem('auth');\n  options.headers.set('Authorization', `Bearer ${accessToken}`);\n  return fetchUtils.fetchJson(url, options);\n};\n\nconst dataProvider = restProvider(BACKEND_URL,httpClient)\n\nfunction App() {\n  return (\n    <Admin dataProvider={dataProvider} authProvider={authProvider}>\n      <Resource\n        name='users'\n        list={UserList}\n        create={UserCreate}\n        edit={UserEdit}\n      />\n      <Resource\n        name='transaction'\n        list={TransactionList}\n        create={TransactionCreate}\n        edit={TransactionEdit}\n      />\n    </Admin>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}